/**

 * @author cramatsu
 * (¬¥ÔΩ°‚Ä¢ œâ ‚Ä¢ÔΩ°`) ‚ô°
 * @Date 13.05.2022

 */

import { Discord, Slash, SlashGroup } from 'discordx';
import { BaseCommandInteraction, MessageActionRow, MessageButton, MessageEmbed } from 'discord.js';
import { inject, injectable } from 'tsyringe';
import { kPrisma, kRedis } from '../tokens';
import Redis from 'ioredis';
import { codeBlock } from '@discordjs/builders';
import { PrismaClient } from '@prisma/client';

@Discord()
@SlashGroup({
	name: 'room',
})
@SlashGroup('room')
@injectable()
export class Room {

	
	public constructor(
		@inject(kRedis) public readonly redis: Redis,
		@inject(kPrisma) public readonly prisma: PrismaClient,
	) {}

	@Slash('init', {
		description: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã',
	})
	async init(int: BaseCommandInteraction<'cached'>) {
		const createdCategory = await int.guild.channels.create('–ö–æ–º–Ω–∞—Ç—ã', {
			type: 'GUILD_CATEGORY',
		});

		const createdVoiceMover = await createdCategory.createChannel('‚ôø | –í–∫–∞—Ç–∏—Ç—å—Å—èÔ∏è', {
			type: 'GUILD_VOICE',
			bitrate: 8000,
		});

		const createdVoiceControl = await createdCategory.createChannel('üõ†Ô∏èÔ∏èÔ∏è', {
			type: 'GUILD_TEXT',
			permissionOverwrites: [
				{
					id: int.guild.roles.everyone.id,
					type: 'role',
					allow: ['VIEW_CHANNEL'],
					deny: ['SEND_MESSAGES'],
				},
			],
		});

		await this.prisma.guild.upsert({
			create: {
				settingsChannelId: createdVoiceControl.id,
				moveChannelId: createdVoiceMover.id,
				id: int.guild.id,
			},
			where: {
				id: int.guild.id,
			},
			update: {
				settingsChannelId: createdVoiceControl.id,
				moveChannelId: createdVoiceMover.id,
				updatedAt: new Date(),
			},
		});

		await int.reply({
			embeds: [
				new MessageEmbed()
					.setColor('BLURPLE')
					.setTitle('„ÉΩ(*„Éªœâ„Éª)Ôæâ')
					.addFields([
						{
							name: '> –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ',
							value: `<#${createdVoiceMover.id}>`,
							inline: true,
						},
						{
							name: '> –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
							value: `<#${createdVoiceControl.id}>`,
							inline: true,
						},
					])
					.setDescription(
						codeBlock(
							'fix',
							'–ö–∞–Ω–∞–ª—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!\n–ï—Å–ª–∏ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ - –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ –∏—Ö!',
						),
					),
			],
		});

		const roleAccessButton = new MessageButton().setCustomId('room-role-access').setEmoji('üõÇ').setStyle('SECONDARY');

		const lockRoom = new MessageButton().setCustomId('room-lock').setEmoji('üîí').setStyle('SECONDARY');

		const setMaxRoomCapacity = new MessageButton()
			.setCustomId('room-max-capacity')
			.setEmoji('üôá')
			.setStyle('SECONDARY');

		const setRoomName = new MessageButton().setCustomId('room-name').setEmoji('üìù').setStyle('SECONDARY');

		const muteMember = new MessageButton().setCustomId('room-mute-member').setEmoji('üéôÔ∏è').setStyle('SECONDARY');

		const kickMember = new MessageButton().setCustomId('room-kick-member').setEmoji('üëä').setStyle('SECONDARY');

		await createdVoiceControl.send({
			embeds: [
				new MessageEmbed()
					.setTitle('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–Ω–∞—Ç–æ–π')
					.setDescription(
						`
						${codeBlock('fix', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è')}
						> –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ —Ä–æ–ª–∏ - :passport_control: 

						> –ó–∞–∫—Ä—ã—Ç—å/–û—Ç–∫—Ä—ã—Ç—å –∫–æ–º–Ω–∞—Ç—É - :lock:

						> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - :bow:
						${codeBlock('fix', '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏')}
						> –í—ã–≥–Ω–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ - :punch:
						
						> –í–∫–ª—é—á–∏—Ç—å/–û—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É - :microphone2:
						${codeBlock('fix', '–û—Å—Ç–∞–ª—å–Ω–æ–µ')}
						> –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã - :pencil: 
						`,
					)
					.setColor('BLURPLE'),
			],
			components: [
				new MessageActionRow().addComponents(roleAccessButton, lockRoom, setMaxRoomCapacity),
				new MessageActionRow().addComponents(kickMember, muteMember),
				new MessageActionRow().addComponents(setRoomName),
			],
		});
	}

	@Slash('delete', {
		description: '–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã',
	})
	async delete(int: BaseCommandInteraction<'cached'>) {
		const guild = await this.prisma.guild.findUnique({
			where: {
				id: int.guild.id,
			},
		});

		if (!guild) {
			await int.reply(codeBlock('diff', '- –ù–µ—Ç—É –∑–∞–ø–∏—Å–∏ –≤ –ë–î'));
			return;
		}

		// TODO
		// FIXME
		await int.guild.channels
			// @ts-ignore
			.resolve(guild.moveChannelId)
			.delete()
			.catch((e) => e);


		// TODO
		// FIXME
		await int.guild.channels
			// @ts-ignore
			.resolve(guild.settingsChannelId)
			.delete()
			.catch((e) => e);

		await this.prisma.guild.update({
			where: {
				id: int.guild.id,
			},
			data: {
				settingsChannelId: null,
				moveChannelId: null,
				updatedAt: new Date(),
			},
		});
		await int.reply(codeBlock('fix', '–ì–æ—Ç–æ–≤–æ!'));
	}
}
